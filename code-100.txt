Given an array of integers and a target number, implement the Binary Search algorithm to determine whether the target exists in the array. The array may not be sorted initially, so you must sort it before performing binary search.

Input Format

The first line contains an integer n, the number of elements in the array.
The second line contains n space-separated integers (the elements of the array).
The third line contains an integer key, the number to be searched.
Constraints

1 ≤ n ≤ 1000
-10⁵ ≤ array elements ≤ 10⁵
-10⁵ ≤ key ≤ 10⁵
Output Format

Print "Found" if the key is present in the array, otherwise print "Not Found".

Sample Input 0

5
10 9 1 2 5
5
Sample Output 0

Found
Sample Input 1

6
9 1 8 7 6 12
15
Sample Output 1

Not Found
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int a[] = new int[n];
        for(int i=0;i<n;i++){
            a[i]=in.nextInt();
        }
        Arrays.sort(a);
        int t = in.nextInt();
        int l=0,h=n-1,f=0;
        while(l<=h){
            int mid = (l+h)/2;
            if(t==a[mid]){
                f=1;
                break;
            }
            else if(t<a[mid]){
                h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        if(f==0){
            System.out.print("Not Found");
        }
        else{
            System.out.print("Found");
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
